boxImage = imread('apple.jpg');
boxImage=rgb2gray(boxImage);
figure;
imshow(boxImage);
title('Image of a Box');
sceneImage = imread('apple.jpg');
sceneImage=rgb2gray(sceneImage);
figure;
imshow(sceneImage);
title('Image of a Cluttered Scene');
boxPoints = detectSURFFeatures(boxImage);
scenePoints = detectSURFFeatures(sceneImage);
figure;
imshow(boxImage);
title('100 Strongest Feature Points from Box Image');
hold on;
plot(selectStrongest(boxPoints, 100));
figure;
imshow(sceneImage);
title('300 Strongest Feature Points from Scene Image');
hold on;
plot(selectStrongest(scenePoints, 300));
[boxFeatures, boxPoints] = extractFeatures(boxImage, boxPoints);
[sceneFeatures, scenePoints] = extractFeatures(sceneImage, scenePoints);
boxPairs = matchFeatures(boxFeatures, sceneFeatures);
matchedBoxPoints = boxPoints(boxPairs(:, 1), :);
matchedScenePoints = scenePoints(boxPairs(:, 2), :);
figure;
showMatchedFeatures(boxImage, sceneImage, matchedBoxPoints, ...
    matchedScenePoints, 'montage');
title('Putatively Matched Points (Including Outliers)');
[tform, inlierBoxPoints, inlierScenePoints] = ...
    estimateGeometricTransform(matchedBoxPoints, matchedScenePoints, 'affine');
figure;
showMatchedFeatures(boxImage, sceneImage, inlierBoxPoints, ...
    inlierScenePoints, 'montage');
title('Matched Points (Inliers Only)');
boxPolygon = [1, 1;...                           % top-left
        size(boxImage, 2), 1;...                 % top-right
        size(boxImage, 2), size(boxImage, 1);... % bottom-right
        1, size(boxImage, 1);...                 % bottom-left
        1, 1];                   % top-left again to close the polygon
    
    newBoxPolygon = transformPointsForward(tform, boxPolygon);
 figure;
imshow(sceneImage);
hold on;
line(newBoxPolygon(:, 1), newBoxPolygon(:, 2), 'Color', 'y');
title('Detected Box');
bananaImage = imread('banana1.bmp');
bananaImage=rgb2gray(bananaImage);
figure;
imshow(bananaImage);
title('Image of an food');
foodPoints = detectSURFFeatures(bananaImage);
figure;
imshow(bananaImage);
hold on;
plot(selectStrongest(foodPoints, 100));
title('100 Strongest Feature Points from food Image');
[foodFeatures, foodPoints] = extractFeatures(bananaImage, foodPoints);
foodPairs = matchFeatures(foodFeatures, sceneFeatures, 'MaxRatio', 0.9);
matchedfoodPoints = foodPoints(foodPairs(:, 1), :);
matchedScenePoints = scenePoints(foodPairs(:, 2), :);
figure;
showMatchedFeatures(bananaImage, sceneImage, matchedfoodPoints, ...
    matchedScenePoints, 'montage');
title('Putatively Matched Points (Including Outliers)');

[tform, inlierfoodPoints, inlierScenePoints] = ...
    estimateGeometricTransform(matchedfoodPoints, matchedScenePoints, 'affine');
figure;
showMatchedFeatures(bananaImage, sceneImage, inlierfoodPoints, ...
    inlierScenePoints, 'montage');
title('Matched Points (Inliers Only)');

foodPolygon = [1, 1;...                                 % top-left
        size(bananaImage, 2), 1;...                       % top-right
        size(bananaImage, 2), size(bananaImage, 1);...  % bottom-right
        1, size(bananaImage, 1);...                       % bottom-left
        1,1];                         % top-left again to close the polygon

newfoodPolygon = transformPointsForward(tform, foodPolygon);

figure;
imshow(sceneImage);
hold on;
line(newBoxPolygon(:, 1), newBoxPolygon(:, 2), 'Color', 'y');
line(newfoodPolygon(:, 1), newfoodPolygon(:, 2), 'Color', 'g');
title('Detected food and Box');
